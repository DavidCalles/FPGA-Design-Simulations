--
-- DO NOT EDIT THIS FILE, your changes will be overwritten
-- This is an automatically generated file.
-- It was generated with uasm, the microassembler, on
-- Mon Aug  1 18:03:11 2022
--
--
--
-- Yeilding a total data width of 44 bits for 9 fields.
-- The maximum address encountered was 0x7ff, needing 11 bits
--
library ieee;
use ieee.std_logic_1164.ALL;
use ieee.numeric_std.ALL;

entity MICROCODE_ROM is
port( ADDR_IN  : in  unsigned(10 downto 0);
      DATA_OUT : out std_logic_vector(43 downto 0));
end MICROCODE_ROM;

architecture RTL of MICROCODE_ROM is

   signal DATA_OUT_R : std_logic_vector(43 downto 0);
begin
   DATA_OUT <= DATA_OUT_R;

   process(ADDR_IN)
     begin
        case ADDR_IN is
          -- START:
          when "00000000000" => DATA_OUT_R <= "00000000100000000000000111111111111111100000";
          when "00000000001" => DATA_OUT_R <= "00000001000000000000000000000000000001100000";
          when "00000000010" => DATA_OUT_R <= "00000001100000000000001111111111111111100000";
          when "00000000011" => DATA_OUT_R <= "00000010000000000000000000000000000001100000";
          when "00000000100" => DATA_OUT_R <= "00000010100000000000000000000011001000100000";
          -- BRANCH_TESTS0:
          when "00000000101" => DATA_OUT_R <= "00000000000000000000010000000000000111000000";
          when "00000000110" => DATA_OUT_R <= "01000000000000000000010000000000011011000000";
          -- BRANCH_TESTS1:
          when "00000000111" => DATA_OUT_R <= "00000000000000000000000000000001100100100000";
          when "00000001000" => DATA_OUT_R <= "00100000100011111000000000000000000000000000";
          when "00000001001" => DATA_OUT_R <= "00000000000000000010000000000000001011000000";
          when "00000001010" => DATA_OUT_R <= "01000000000000000000010000000000011011000000";
          -- BRANCH_TESTS2:
          when "00000001011" => DATA_OUT_R <= "00000000000000000000000000000001100101100000";
          when "00000001100" => DATA_OUT_R <= "01100001100011111000000000000000000000000000";
          when "00000001101" => DATA_OUT_R <= "00000000000000000000100000000000001111000000";
          when "00000001110" => DATA_OUT_R <= "01000000000000000000010000000000011011000000";
          -- BRANCH_TESTS3:
          when "00000001111" => DATA_OUT_R <= "00000000000000000000000000000001100110100000";
          when "00000010000" => DATA_OUT_R <= "10000010000101111000000000000000000000000000";
          when "00000010001" => DATA_OUT_R <= "00000000000000000001000000000000010011000000";
          when "00000010010" => DATA_OUT_R <= "01000000000000000000010000000000011011000000";
          -- BRANCH_TESTS4:
          when "00000010011" => DATA_OUT_R <= "00000000000000000000000000000001100111100000";
          when "00000010100" => DATA_OUT_R <= "10000010000101111000000000000000000000000000";
          when "00000010101" => DATA_OUT_R <= "00000000000000000001100000000000010111000000";
          when "00000010110" => DATA_OUT_R <= "01000000000000000000010000000000011011000000";
          -- BRANCH_TESTS5:
          when "00000010111" => DATA_OUT_R <= "00000000000000000000000000000001101000100000";
          when "00000011000" => DATA_OUT_R <= "00000000000000000100010000000000000000000000";
          when "00000011001" => DATA_OUT_R <= "01000000000000000000010000000000011011000000";
          -- BRANCH_TESTS6:
          when "00000011010" => DATA_OUT_R <= "00000000000000000000000000000001101001100000";
          -- IDLE:
          when "00000011011" => DATA_OUT_R <= "10100000000000000000010000000000011011000000";
          when "11111111111" => DATA_OUT_R <= "00000000000000000000000000000000000000000000";
          when others => DATA_OUT_R <= "00000000000000000000000000000000000000000000";
       end case;
     end process;
end RTL;
